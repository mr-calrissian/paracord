/// <reference types="node" />
import { EventEmitter } from 'events';
import { DebugLevel, ILockServiceOptions } from '../../common';
import { RemoteApiResponse } from '../../rpc/types';
import { Message, RawGuild, RawGuildMember, RawPresence, RawUser, ReadyEventFields } from '../../types';
import { GuildMap, GuildMember, PresenceMap, Snowflake, User, UserMap } from '../../types/custom';
import Api from '../Api/Api';
import { IApiResponse } from '../Api/types';
import Gateway from '../Gateway/Gateway';
import Guild from './structures/Guild';
import { GatewayMap, ParacordLoginOptions, ParacordOptions } from './types';
export default class Paracord extends EventEmitter {
    readonly token: string;
    private initialized;
    user: User;
    private unavailableGuildTolerance?;
    private unavailableGuildWait?;
    private startWithUnavailableGuildsInterval?;
    private _api;
    readonly gateways: GatewayMap;
    gatewayLoginQueue: Gateway[];
    private gatewayLockServiceOptions?;
    private apiOptions;
    private gatewayOptions;
    safeGatewayIdentifyTimestamp: number;
    private gatewayWaitCount;
    startingGateway: Gateway | undefined;
    private guildWaitCount;
    private lastGuildTimestamp?;
    guilds: GuildMap;
    users: UserMap;
    presences: PresenceMap;
    private processGatewayQueueInterval?;
    private sweepCachesInterval?;
    private sweepRecentPresenceUpdatesInterval?;
    private events?;
    private allowEventsDuringStartup;
    preventLogin: boolean;
    request: Api['request'];
    addRateLimitService: Api['addRateLimitService'];
    addRequestService: Api['addRequestService'];
    private gatewayEvents;
    private static validateParams;
    constructor(token: string, options?: ParacordOptions);
    get shards(): GatewayMap;
    get connecting(): boolean;
    get api(): Api;
    private bindEventFunctions;
    private bindTimerFunction;
    eventHandler(eventType: string, data: unknown, shard: number): unknown;
    log(level: DebugLevel, message: string, data?: unknown): void;
    emit(event: string, ...args: unknown[]): boolean;
    login(options?: ParacordLoginOptions): Promise<void>;
    private startGatewayLoginInterval;
    processGatewayQueue(): Promise<void>;
    private startWithUnavailableGuilds;
    private enqueueGateways;
    private computeShards;
    private addNewGateway;
    init(): void;
    startSweepInterval(): void;
    private setUpApi;
    private setUpGateway;
    private selfAssignHandlerFunctions;
    addIdentifyLockServices(mainServerOptions: ILockServiceOptions, ...serverOptions: ILockServiceOptions[]): void;
    handleReady(data: ReadyEventFields, shard: number): void;
    private checkIfDoneStarting;
    private completeShardStartup;
    clearStartingShardState(): void;
    private completeStartup;
    upsertGuild(data: RawGuild, shard?: number, GuildConstructor?: typeof Guild): Guild | undefined;
    upsertUser(user: User | RawUser): User;
    updatePresences(presence: RawPresence): RawPresence;
    private upsertPresence;
    private circularAssignCachedPresence;
    private circularAssignCachedUser;
    private deletePresence;
    handlePresence({ guild, presence }: {
        guild?: Guild;
        presence: RawPresence;
    }): RawPresence;
    cacheMemberFromEvent(guild: Guild, member: GuildMember | RawGuildMember): GuildMember;
    private sweepCaches;
    static uqSnowflakes(...args: (Map<string, unknown> | string)[]): string[];
    static deDupe(a: Snowflake[]): Map<Snowflake, undefined>;
    private static trimMembersFromDeleteList;
    private clearUserFromCaches;
    sendMessage(channelId: Snowflake, message: string | Record<string, unknown> | Message): Promise<IApiResponse | RemoteApiResponse>;
    editMessage(message: Record<string, unknown> | Message, newMessage: string | Record<string, unknown> | Message): Promise<IApiResponse | RemoteApiResponse>;
    fetchMember(guild: Snowflake | Guild, memberId: Snowflake): Promise<IApiResponse | RemoteApiResponse>;
    fetchUser(userId: Snowflake): Promise<IApiResponse | RemoteApiResponse>;
}
