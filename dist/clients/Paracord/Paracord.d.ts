/// <reference types="node" />
import { EventEmitter } from 'events';
import { DebugLevel, ILockServiceOptions } from '../../common';
import { RemoteApiResponse } from '../../rpc/types';
import { AugmentedRawGuild, RawPresence, RawUser, ReadyEventFields, Snowflake } from '../../types';
import Api from '../Api/Api';
import { IApiResponse } from '../Api/types';
import Gateway from '../Gateway/Gateway';
import Guild from './structures/Guild';
import { GatewayMap, GuildMap, Message, ParacordLoginOptions, ParacordOptions, PresenceMap, User, UserMap, ParacordCache, Presence } from './types';
export default class Paracord extends EventEmitter {
    #private;
    request: Api['request'];
    addRateLimitService: Api['addRateLimitService'];
    addRequestService: Api['addRequestService'];
    user: User;
    readonly token: string;
    readonly gatewayLoginQueue: Gateway[];
    get guilds(): GuildMap;
    get users(): UserMap;
    get presences(): PresenceMap;
    safeGatewayIdentifyTimestamp: number;
    startingGateway: Gateway | undefined;
    private static validateParams;
    private static ensureCamelProps;
    constructor(token: string, options?: ParacordOptions);
    get shards(): GatewayMap;
    get connecting(): boolean;
    get api(): Api;
    private bindEventFunctions;
    private bindTimerFunction;
    eventHandler(eventType: string, data: unknown, shard: number): unknown;
    log(level: DebugLevel, message: string, data?: unknown): void;
    emit(event: string, ...args: unknown[]): boolean;
    isCached(prop: ParacordCache): boolean;
    login(options?: ParacordLoginOptions): Promise<void>;
    private startGatewayLoginInterval;
    processGatewayQueue(): Promise<void>;
    private startWithUnavailableGuilds;
    private enqueueGateways;
    private computeShards;
    private addNewGateway;
    init(): void;
    startSweepInterval(): void;
    private setUpApi;
    private setUpGateway;
    private selfAssignHandlerFunctions;
    addIdentifyLockServices(mainServerOptions: ILockServiceOptions, ...serverOptions: ILockServiceOptions[]): void;
    handleReady(data: ReadyEventFields, shard: number): void;
    private checkIfDoneStarting;
    private completeShardStartup;
    clearStartingShardState(): void;
    private completeStartup;
    protected upsertGuild(data: AugmentedRawGuild, shard?: number, GuildConstructor?: typeof Guild): Guild | undefined;
    upsertUser(user: User | RawUser): User;
    updatePresences(presence: RawPresence): RawPresence;
    private upsertPresence;
    private circularAssignCachedPresence;
    private circularAssignCachedUser;
    private deletePresence;
    handlePresence(presence: RawPresence, guild: Guild | undefined): Presence;
    private sweepCaches;
    static uqSnowflakes(...args: (Map<string, unknown> | string)[]): string[];
    static deDupe(a: Snowflake[]): Map<Snowflake, undefined>;
    private static trimMembersFromDeleteList;
    private clearUserFromCaches;
    sendMessage(channelId: Snowflake, message: string | Record<string, unknown> | Message): Promise<IApiResponse | RemoteApiResponse>;
    editMessage(message: Record<string, unknown> | Message, newMessage: string | Record<string, unknown> | Message): Promise<IApiResponse | RemoteApiResponse>;
    fetchMember(guild: Snowflake | Guild, memberId: Snowflake): Promise<IApiResponse | RemoteApiResponse>;
    fetchUser(userId: Snowflake): Promise<IApiResponse | RemoteApiResponse>;
}
