import { AugmentedRawGuild, AugmentedRawGuildMember, AugmentedRawVoiceState, DefaultMessageNotificationLevel, ExplicitContentFilterLevel, GuildFeature, GuildMemberUpdateEventFields, ISO8601timestamp, MFALevel, PremiumTier, RawChannel, RawPresence, RawRole, Snowflake, SystemChannelFlags, UnavailableGuild, VerificationLevel, VoiceRegion } from '../../../types';
import Paracord from '../Paracord';
import { EmojiMap, GuildChannel, GuildChannelMap, GuildEmoji, GuildMember, GuildMemberMap, GuildRole, GuildVoiceState, PresenceMap, RoleMap, VoiceStateMap } from '../types';
import Base from './Base';
export default class Guild extends Base {
    #private;
    unavailable: boolean;
    memberCount?: number;
    readonly id: Snowflake;
    readonly name: string;
    readonly icon: string | null;
    readonly splash: string | null;
    readonly discoverySplash: string | null;
    readonly ownerId: Snowflake;
    readonly region: VoiceRegion;
    readonly afkChannelId: Snowflake | null;
    afkChannel: GuildChannel | undefined;
    readonly afkTimeout: number;
    readonly verificationLevel: VerificationLevel;
    readonly defaultMessageNotifications: DefaultMessageNotificationLevel;
    readonly explicitContentFilter: ExplicitContentFilterLevel;
    readonly features: GuildFeature[];
    readonly mfaLevel: MFALevel;
    readonly applicationId: Snowflake | null;
    readonly widgetEnabled?: boolean;
    readonly widgetChannelId?: Snowflake | null;
    widgetChannel: GuildChannel | undefined;
    readonly systemChannelId: Snowflake | null;
    systemChannel: GuildChannel | undefined;
    readonly systemChannelFlags: SystemChannelFlags;
    readonly rulesChannelId: Snowflake | null;
    rulesChannel: GuildChannel | undefined;
    readonly joinedAt: ISO8601timestamp;
    readonly large?: boolean;
    readonly maxPresences?: number | null;
    readonly maxMembers?: number;
    readonly vanityUrlCode: string | null;
    readonly description: string | null;
    readonly banner: string | null;
    readonly premiumTier: PremiumTier;
    readonly premiumSubscriptionCount?: number;
    readonly preferredLocale: string;
    readonly publicUpdatesChannelId: Snowflake | null;
    publicUpdatesChannel: GuildChannel | undefined;
    readonly maxVideoChannelUsers?: number;
    readonly shard: number;
    owner?: GuildMember;
    me: GuildMember;
    constructor(guildData: AugmentedRawGuild | UnavailableGuild, client: Paracord, shard: number);
    get client(): Paracord;
    get channels(): GuildChannelMap;
    get members(): GuildMemberMap;
    get presences(): PresenceMap;
    get voiceStates(): VoiceStateMap;
    get roles(): RoleMap;
    get emojis(): EmojiMap;
    get unsafe_channels(): GuildChannelMap | undefined;
    get unsafe_members(): GuildMemberMap | undefined;
    get unsafe_presences(): PresenceMap | undefined;
    get unsafe_voiceStates(): VoiceStateMap | undefined;
    get unsafe_roles(): RoleMap | undefined;
    get unsafe_emojis(): EmojiMap | undefined;
    get channelIds(): Snowflake[];
    get memberIds(): GuildMember['user']['id'][];
    get createdOn(): number;
    update(guildData: Partial<AugmentedRawGuild>): Guild;
    hasPermission(permission: number, member: GuildMember, adminOverride?: boolean): boolean;
    hasChannelPermission(permission: number, member: GuildMember, channel: GuildChannel | Snowflake, stopOnOwnerAdmin?: boolean): boolean;
    insertChannel(channel: RawChannel): GuildChannel | undefined;
    updateChannel(channel: RawChannel): GuildChannel | undefined;
    private cacheChannel;
    removeChannel(id: RawChannel['id']): GuildChannel | undefined;
    upsertMember(member: AugmentedRawGuildMember | GuildMemberUpdateEventFields): GuildMember;
    private cacheMember;
    upsertRole(role: RawRole): GuildRole;
    upsertEmojis(emojis: GuildEmoji[]): [GuildEmoji[], GuildEmoji[]];
    upsertVoiceState(voiceState: AugmentedRawVoiceState): GuildVoiceState;
    private insertPresence;
    setPresence(presence: RawPresence): void;
    deletePresence(userId: Snowflake): void;
}
