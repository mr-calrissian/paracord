import {
  GuildMember, ISO8601timestamp, RawEmoji, RawGuildMember, RawRole, Snowflake, User,
} from '.';

export type RawChannel = {
  /** the id of this channel */
  id: Snowflake;
  /** the type of channel */
  type: number;
  /** the id of the guild */
  guildId?: Snowflake;
  /** sorting position of the channel */
  position?: number;
  /** explicit permission overwrites for members and roles */
  permissionOverwrites?: Overwrite[];
  /** the name of the channel (2-100 characters) */
  name?: string;
  /** the channel topic (0-1024 characters) */
  topic?: string | null;
  /** whether the channel is nsfw */
  nsfw?: boolean;
  /** the id of the last message sent in this channel (may not point to an existing or valid message) */
  lastMessageId?: Snowflake | null;
  /** the bitrate (in bits) of the voice channel */
  bitrate?: number;
  /** the user limit of the voice channel */
  userLimit?: number;
  /** amount of seconds a user has to wait before sending another message (0-21600); bots, as well as users with the permission `manage_messages` or `manage_channel`, are unaffected */
  rateLimitPerUser?: number;
  /** the recipients of the DM */
  recipients?: User[];
  /** icon hash */
  icon?: string | null;
  /** id of the DM creator */
  ownerId?: Snowflake;
  /** application id of the group DM creator if it is bot-created */
  applicationId?: Snowflake;
  /** id of the parent category for a channel (each parent category can contain up to 50 channels) */
  parentId?: Snowflake | null;
  /** when the last pinned message was pinned */
  lastPinTimestamp?: ISO8601timestamp;
};

// ========================================================================

export type Message = {
  /** id of the message */
  id: Snowflake;
  /** id of the channel the message was sent in */
  channelId: Snowflake;
  /** id of the guild the message was sent in */
  guildId?: Snowflake;
  /** the author of this message (not guaranteed to be a valid user, see below) */
  author: User;
  /** member properties for this message's author */
  member?: RawGuildMember;
  /** contents of the message */
  content: string;
  /** when this message was sent */
  timestamp: ISO8601timestamp;
  /** when this message was edited (or null if never) */
  editedTimestamp: ISO8601timestamp | null;
  /** whether this was a TTS message */
  tts: boolean;
  /** whether this message mentions everyone */
  mentionEveryone: boolean;
  /** users specifically mentioned in the message */
  mentions: User & Partial<GuildMember>;
  /** roles specifically mentioned in this message */
  mentionRoles: RawRole[];
  /** channels specifically mentioned in this message */
  mentionChannels?: ChannelMention[];
  /** any attached files */
  attachments: Attachment[];
  /** any embedded content */
  embeds: Embed[];
  /** reactions to the message */
  reactions?: Reaction[];
  /** used for validating a message was sent */
  nonce?: number | string;
  /** whether this message is pinned */
  pinned: boolean;
  /** if the message is generated by a webhook, this is the webhook's id */
  webhookId?: Snowflake;
  /** type of message */
  type: number;
  /** sent with Rich Presence-related chat embeds */
  activity?: MessageActivity;
  /** sent with Rich Presence-related chat embeds */
  application?: MessageApplication;
  /** reference data sent with crossposted messages */
  messageReference?: MessageReference;
  /** message flags `OR`d together, describes extra features of the message */
  flags?: number;
};

// ========================================================================

export type MessageTypes = [
  /** DEFAULT */
  0 |
  /** RECIPIENT_ADD */
  1 |
  /** RECIPIENT_REMOVE */
  2 |
  /** CALL */
  3 |
  /** CHANNEL_NAME_CHANGE */
  4 |
  /** CHANNEL_ICON_CHANGE */
  5 |
  /** CHANNEL_PINNED_MESSAGE */
  6 |
  /** GUILD_MEMBER_JOIN */
  7 |
  /** USER_PREMIUM_GUILD_SUBSCRIPTION */
  8 |
  /** USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_1 */
  9 |
  /** USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_2 */
  10 |
  /** USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_3 */
  11 |
  /** CHANNEL_FOLLOW_ADD */
  12 |
  /** GUILD_DISCOVERY_DISQUALIFIED */
  14 |
  /** GUILD_DISCOVERY_REQUALIFIED */
  15
];

// ========================================================================

export type MessageActivity = {
  /** type of message activity */
  type: number;
  /** party_id from a Rich Presence event */
  partyId?: string;
};

// ========================================================================

export type MessageApplication = {
  /** id of the application */
  id: Snowflake;
  /** id of the embed's image asset */
  coverImage?: string;
  /** application's description */
  description: string;
  /** id of the application's icon */
  icon: string | null;
  /** name of the application */
  name: string;
};

// ========================================================================

export type MessageReference = {
  /** id of the originating message */
  messageId?: Snowflake;
  /** id of the originating message's channel */
  channelId: Snowflake;
  /** id of the originating message's guild */
  guildId?: Snowflake;
};

// ========================================================================

export type MessageActivityTypes = [
  /** JOIN */
  1 |
  /** SPECTATE */
  2 |
  /** LISTEN */
  3 |
  /** JOIN_REQUEST */
  5
];

// ========================================================================

export enum MessageFlags {
  CROSSPOSTED = 1 << 0,
  IS_CROSSPOST = 1 << 1,
  SUPPRESS_EMBEDS = 1 << 2,
  SOURCE_MESSAGE_DELETED = 1 << 3,
  URGENT = 1 << 4
}

// ========================================================================

export type Reaction = {
  /** times this emoji has been used to react */
  count: number;
  /** whether the current user reacted using this emoji */
  me: boolean;
  /** emoji information */
  emoji: Partial<RawEmoji>;
};

// ========================================================================

export type Overwrite = {
  /** role or user id */
  id: Snowflake;
  /** either "role" or "member" */
  type: string;
  /** permission bit set */
  allow: number;
  /** permission bit set */
  deny: number;
};

// ========================================================================

export type Embed = {
  /** title of embed */
  title?: string;
  /** type of embed (always "rich" for webhook embeds) */
  type?: string;
  /** description of embed */
  description?: string;
  /** url of embed */
  url?: string;
  /** timestamp of embed content */
  timestamp?: ISO8601timestamp;
  /** color code of the embed */
  color?: number;
  /** footer information */
  footer?: EmbedFooter;
  /** image information */
  image?: EmbedImage;
  /** thumbnail information */
  thumbnail?: EmbedThumbnail;
  /** video information */
  video?: EmbedVideo;
  /** provider information */
  provider?: EmbedProvider;
  /** author information */
  author?: EmbedAuthor;
  /** fields information */
  fields?: EmbedField[];
};

// ========================================================================

export type EmbedThumbnail = {
  /** source url of thumbnail (only supports http(s) and attachments) */
  url?: string;
  /** a proxied url of the thumbnail */
  proxyUrl?: string;
  /** height of thumbnail */
  height?: number;
  /** width of thumbnail */
  width?: number;
};

// ========================================================================

export type EmbedVideo = {
  /** source url of video */
  url?: string;
  /** height of video */
  height?: number;
  /** width of video */
  width?: number;
};

// ========================================================================

export type EmbedImage = {
  /** source url of image (only supports http(s) and attachments) */
  url?: string;
  /** a proxied url of the image */
  proxyUrl?: string;
  /** height of image */
  height?: number;
  /** width of image */
  width?: number;
};

// ========================================================================

export type EmbedProvider = {
  /** name of provider */
  name?: string;
  /** url of provider */
  url?: string;
};

// ========================================================================

export type EmbedAuthor = {
  /** name of author */
  name?: string;
  /** url of author */
  url?: string;
  /** url of author icon (only supports http(s) and attachments) */
  iconUrl?: string;
  /** a proxied url of author icon */
  proxyIconUrl?: string;
};

// ========================================================================

export type EmbedFooter = {
  /** footer text */
  text: string;
  /** url of footer icon (only supports http(s) and attachments) */
  iconUrl?: string;
  /** a proxied url of footer icon */
  proxyIconUrl?: string;
};

// ========================================================================

export type EmbedField = {
  /** name of the field */
  name: string;
  /** value of the field */
  value: string;
  /** whether or not this field should display inline */
  inline?: boolean;
};

// ========================================================================

export type Attachment = {
  /** attachment id */
  id: Snowflake;
  /** name of file attached */
  filename: string;
  /** size of file in bytes */
  size: number;
  /** source url of file */
  url: string;
  /** a proxied url of file */
  proxyUrl: string;
  /** height of file (if image) */
  height: number | null;
  /** width of file (if image) */
  width: number | null;
};

// ========================================================================

export type ChannelMention = {
  /** id of the channel */
  id: Snowflake;
  /** id of the guild containing the channel */
  guildId: Snowflake;
  /** the type of channel */
  type: number;
  /** the name of the channel */
  name: string;
};

// ========================================================================

export type AllowedMentionTypes = [
  /** Role Mentions */
  'roles' |
  /** User Mentions */
  'users' |
  /** Everyone Mentions */
  'everyone'
];

// ========================================================================

export type AllowedMentions = {
  /** An array of allowed mention types to parse from the content. */
  parse: AllowedMentionTypes[];
  /** Array of role_ids to mention (Max size of 100) */
  roles: Snowflake[];
  /** Array of user_ids to mention (Max size of 100) */
  users: Snowflake[];
};
